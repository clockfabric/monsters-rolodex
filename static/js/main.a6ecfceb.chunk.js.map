{"version":3,"sources":["components/card.js","components/card-list.js","components/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","monster","id","alt","name","email","CardList","monsters","map","components_card","key","SearchBox","searchString","handleChange","style","margin","padding","type","placeholder","onChange","evt","value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetch","then","response","json","setState","catch","error","console","log","filterMonsters","state","filter","toLowerCase","includes","target","search_box","components_card_list","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAkBeA,SAfF,SAAAC,GACZ,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OACCE,IAAG,wBAAAC,OACFN,EAAMO,QAAQC,GADZ,0BAGHC,IAAI,YAELR,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQG,MACnBT,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQI,UCEPC,SAXE,SAAAZ,GAAS,IACjBa,EAAab,EAAba,SACR,OACCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbS,EAASC,IAAI,SAAAP,GACb,OAAON,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKT,EAAQC,GAAID,QAASA,SCM5BU,EAbG,SAAAjB,GAAS,IAClBkB,EAA+BlB,EAA/BkB,aAAcC,EAAiBnB,EAAjBmB,aACtB,OACClB,EAAAC,EAAAC,cAAA,SACCiB,MAAO,CAAEC,OAAQ,OAAQC,QAAS,QAClCC,KAAK,SACLC,YAAY,kBACZC,SAAU,SAAAC,GAAG,OAAIP,EAAaO,IAC9BC,MAAOT,KCyCKU,qBA7Cd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQDI,kBAAoB,WACnBC,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAzB,GACLgB,EAAKY,SAAS,CAAE5B,eAEhB6B,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAO,6BAfvBd,EAkBdiB,eAAiB,WAChB,OAAOjB,EAAKkB,MAAMlC,SAASmC,OAAO,SAAAzC,GACjC,OAAOA,EAAQG,KACbuC,cACAC,SAASrB,EAAKkB,MAAM7B,aAAa+B,kBAtBvBpB,EA0BdV,aAAe,SAAAO,GACd,IAAMR,EAAeQ,EAAIyB,OAAOxB,MAChCE,EAAKY,SAAS,CAAEvB,kBAzBhBW,EAAKkB,MAAQ,CACZlC,SAAU,GACVK,aAAc,IALFW,wEAgCb,OACC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,oBACAH,EAAAC,EAAAC,cAACiD,EAAD,CACClC,aAAcc,KAAKe,MAAM7B,aACzBC,aAAca,KAAKb,eAEpBlB,EAAAC,EAAAC,cAACkD,EAAD,CAAUxC,SAAUmB,KAAKc,2BAxCXQ,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.a6ecfceb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = props => {\r\n\treturn (\r\n\t\t<div className='card-container'>\r\n\t\t\t<img\r\n\t\t\t\tsrc={`https://robohash.org/${\r\n\t\t\t\t\tprops.monster.id\r\n\t\t\t\t}?set=set2&size=180x180`}\r\n\t\t\t\talt='Monster'\r\n\t\t\t/>\r\n\t\t\t<h1>{props.monster.name}</h1>\r\n\t\t\t<h3>{props.monster.email}</h3>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./card\";\r\nimport \"./card-list.css\";\r\n\r\nconst CardList = props => {\r\n\tconst { monsters } = props;\r\n\treturn (\r\n\t\t<div className='card-list'>\r\n\t\t\t{monsters.map(monster => {\r\n\t\t\t\treturn <Card key={monster.id} monster={monster} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = props => {\r\n\tconst { searchString, handleChange } = props;\r\n\treturn (\r\n\t\t<input\r\n\t\t\tstyle={{ margin: \"50px\", padding: \"10px\" }}\r\n\t\t\ttype='search'\r\n\t\t\tplaceholder='search monsters'\r\n\t\t\tonChange={evt => handleChange(evt)}\r\n\t\t\tvalue={searchString}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport CardList from \"./components/card-list\";\nimport SearchBox from \"./components/search-box\";\nimport \"./App.css\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchString: \"\"\n\t\t};\n\t}\n\n\tcomponentDidMount = () => {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then(response => response.json())\n\t\t\t.then(monsters => {\n\t\t\t\tthis.setState({ monsters });\n\t\t\t})\n\t\t\t.catch(error => console.log(error, \"Something went wrong!!\"));\n\t};\n\n\tfilterMonsters = () => {\n\t\treturn this.state.monsters.filter(monster => {\n\t\t\treturn monster.name\n\t\t\t\t.toLowerCase()\n\t\t\t\t.includes(this.state.searchString.toLowerCase());\n\t\t});\n\t};\n\n\thandleChange = evt => {\n\t\tconst searchString = evt.target.value;\n\t\tthis.setState({ searchString });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<p className='title-text'>Monsters Rolodex</p>\n\t\t\t\t<SearchBox\n\t\t\t\t\tsearchString={this.state.searchString}\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<CardList monsters={this.filterMonsters()} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}